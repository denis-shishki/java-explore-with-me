{
	"info": {
		"_postman_id": "5f14d58e-992f-4d8c-8782-94e1dcebe974",
		"name": "explore-with-me",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15736414"
	},
	"item": [
		{
			"name": "stats server",
			"item": [
				{
					"name": "hit",
					"item": [
						{
							"name": "сохранение /events/1 user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Has hit create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test hit 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);\r",
											"});\r",
											";pm.test(\"Test hit 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('uri');\r",
											"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
											"});\r",
											"pm.test(\"Test hit 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('app');\r",
											"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
											"});\r",
											"pm.test(\"Test hit 'ip' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('ip');\r",
											"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.1\"').to.eql('192.163.0.1');\r",
											"});\r",
											"pm.test(\"Test hit 'timestamp' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" field must be \"2023-09-01 11:00:00\"').to.eql('2023-09-01 11:00:00');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-09-01 11:00:00\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hit"
									]
								},
								"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
							},
							"response": [
								{
									"name": "Информация сохранена",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"app\": \"<string>\",\n  \"uri\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"timestamp\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/hit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hit"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "сохранение /events/1 user 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Has hit create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test hit 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);\r",
											"});\r",
											";pm.test(\"Test hit 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('uri');\r",
											"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
											"});\r",
											"pm.test(\"Test hit 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('app');\r",
											"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
											"});\r",
											"pm.test(\"Test hit 'ip' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('ip');\r",
											"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.1\"').to.eql('192.163.0.1');\r",
											"});\r",
											"pm.test(\"Test hit 'timestamp' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" field must be \"2023-09-01 11:10:23\"').to.eql('2023-09-01 11:10:23');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.1\",\n  \"timestamp\": \"2023-09-01 11:10:23\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hit"
									]
								},
								"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
							},
							"response": [
								{
									"name": "Информация сохранена",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"app\": \"<string>\",\n  \"uri\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"timestamp\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/hit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hit"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "сохранение /events/3 user 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Has hit create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test hit 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test hit 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('app');\r",
											"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
											"})\r",
											";pm.test(\"Test hit 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('uri');\r",
											"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/3\"').to.eql('/events/3');\r",
											"});\r",
											"pm.test(\"Test hit 'ip' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('ip');\r",
											"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.2\"').to.eql('192.163.0.2');\r",
											"});\r",
											"pm.test(\"Test hit 'timestamp' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" field must be \"2023-09-01 13:00:23\"').to.eql('2023-09-01 13:00:23');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/3\",\n  \"ip\": \"192.163.0.2\",\n  \"timestamp\": \"2023-09-01 13:00:23\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hit"
									]
								},
								"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
							},
							"response": [
								{
									"name": "Информация сохранена",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"app\": \"<string>\",\n  \"uri\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"timestamp\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/hit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hit"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "сохранение /events/1 user 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Has hit create response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"pm.test(\"Test hit 'id' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('id');\r",
											"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);\r",
											"});\r",
											"pm.test(\"Test hit 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('app');\r",
											"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql('ewm-main-service');\r",
											"})\r",
											";pm.test(\"Test hit 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('uri');\r",
											"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/1\"').to.eql('/events/1');\r",
											"});\r",
											"pm.test(\"Test hit 'ip' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('ip');\r",
											"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.4\"').to.eql('192.163.0.4');\r",
											"});\r",
											"pm.test(\"Test hit 'timestamp' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property('timestamp');\r",
											"    pm.expect(jsonData.timestamp, '\"timestamp\" field must be \"2023-09-01 11:00:23\"').to.eql('2023-09-01 11:00:23');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"app\": \"ewm-main-service\",\n  \"uri\": \"/events/1\",\n  \"ip\": \"192.163.0.4\",\n  \"timestamp\": \"2023-09-01 11:00:23\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/hit",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"hit"
									]
								},
								"description": "Сохранение информации о том, что на uri конкретного сервиса был отправлен запрос пользователем. Название сервиса, uri и ip пользователя указаны в теле запроса."
							},
							"response": [
								{
									"name": "Информация сохранена",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<long>\",\n  \"app\": \"<string>\",\n  \"uri\": \"<string>\",\n  \"ip\": \"<string>\",\n  \"timestamp\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/hit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"hit"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "stats",
					"item": [
						{
							"name": "Получение статистики events/1 уникальные",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Test list response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test stat[0] 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('app');\r",
											"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('uri');\r",
											"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'hits' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('hits');\r",
											"    pm.expect(jsonData[0].hits, '\"hits\" must be 2').to.eql(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stats?start=2023-09-01%2010%3A30%3A45&end=2023-09-25%2018%3A30%3A45&uris=/events/1&unique=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stats"
									],
									"query": [
										{
											"key": "start",
											"value": "2023-09-01%2010%3A30%3A45",
											"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "end",
											"value": "2023-09-25%2018%3A30%3A45",
											"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "uris",
											"value": "/events/1",
											"description": "Список uri для которых нужно выгрузить статистику"
										},
										{
											"key": "uris",
											"value": "/events/2",
											"disabled": true
										},
										{
											"key": "unique",
											"value": "true",
											"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
										}
									]
								}
							},
							"response": [
								{
									"name": "Статистика собрана",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stats"
											],
											"query": [
												{
													"key": "start",
													"value": "<string>",
													"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "end",
													"value": "<string>",
													"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "uris",
													"value": "<string>",
													"description": "Список uri для которых нужно выгрузить статистику"
												},
												{
													"key": "unique",
													"value": "false",
													"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  },\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  }\n]"
								}
							]
						},
						{
							"name": "Получение статистики events/1  unique null",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Test list response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test stat[0] 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('app');\r",
											"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('uri');\r",
											"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'hits' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('hits');\r",
											"    pm.expect(jsonData[0].hits, '\"hits\" must be 3').to.eql(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stats?start=2023-09-01%2010%3A30%3A45&end=2023-09-25%2018%3A30%3A45&uris=/events/1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stats"
									],
									"query": [
										{
											"key": "start",
											"value": "2023-09-01%2010%3A30%3A45",
											"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "end",
											"value": "2023-09-25%2018%3A30%3A45",
											"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "uris",
											"value": "/events/1",
											"description": "Список uri для которых нужно выгрузить статистику"
										},
										{
											"key": "uris",
											"value": "/events/2",
											"disabled": true
										},
										{
											"key": "unique",
											"value": "true",
											"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Статистика собрана",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stats"
											],
											"query": [
												{
													"key": "start",
													"value": "<string>",
													"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "end",
													"value": "<string>",
													"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "uris",
													"value": "<string>",
													"description": "Список uri для которых нужно выгрузить статистику"
												},
												{
													"key": "unique",
													"value": "false",
													"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  },\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  }\n]"
								}
							]
						},
						{
							"name": "Получение статистики /events/1 events/3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Test list response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
											"});\r",
											"pm.test(\"Test stat[0] 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('app');\r",
											"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('uri');\r",
											"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'hits' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('hits');\r",
											"    pm.expect(jsonData[0].hits, '\"hits\" must be 3').to.eql(3);\r",
											"});\r",
											"pm.test(\"Test stat[1] 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[1]).to.have.property('app');\r",
											"    pm.expect(jsonData[1].app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
											"});\r",
											"pm.test(\"Test stat[1] 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[1]).to.have.property('uri');\r",
											"    pm.expect(jsonData[1].uri, '\"uri\" must be \"/events/3\"').to.eql(\"/events/3\");\r",
											"});\r",
											"pm.test(\"Test stat[1] 'hits' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[1]).to.have.property('hits');\r",
											"    pm.expect(jsonData[1].hits, '\"hits\" must be 1').to.eql(1);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stats?start=2022-12-25%2018%3A30%3A45&end=2023-12-25%2018%3A30%3A45&uris=/events/1&uris=/events/3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stats"
									],
									"query": [
										{
											"key": "start",
											"value": "2022-12-25%2018%3A30%3A45",
											"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "end",
											"value": "2023-12-25%2018%3A30%3A45",
											"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "uris",
											"value": "/events/1",
											"description": "Список uri для которых нужно выгрузить статистику"
										},
										{
											"key": "uris",
											"value": "/events/3"
										},
										{
											"key": "unique",
											"value": "false",
											"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Статистика собрана",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stats"
											],
											"query": [
												{
													"key": "start",
													"value": "<string>",
													"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "end",
													"value": "<string>",
													"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "uris",
													"value": "<string>",
													"description": "Список uri для которых нужно выгрузить статистику"
												},
												{
													"key": "unique",
													"value": "false",
													"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  },\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  }\n]"
								}
							]
						},
						{
							"name": "Получение статистики events/1 не уникальные",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
											"});\r",
											"pm.test(\"Test list response\", function () {\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
											"});\r",
											"pm.test(\"Test stat[0] 'app' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('app');\r",
											"    pm.expect(jsonData[0].app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'uri' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('uri');\r",
											"    pm.expect(jsonData[0].uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
											"});\r",
											"pm.test(\"Test stat[0] 'hits' field\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData[0]).to.have.property('hits');\r",
											"    pm.expect(jsonData[0].hits, '\"hits\" must be 3').to.eql(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stats?start=2023-09-01%2010%3A30%3A45&end=2023-09-25%2018%3A30%3A45&uris=/events/1&unique=false",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stats"
									],
									"query": [
										{
											"key": "start",
											"value": "2023-09-01%2010%3A30%3A45",
											"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "end",
											"value": "2023-09-25%2018%3A30%3A45",
											"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "uris",
											"value": "/events/1",
											"description": "Список uri для которых нужно выгрузить статистику"
										},
										{
											"key": "uris",
											"value": "/events/2",
											"disabled": true
										},
										{
											"key": "unique",
											"value": "false",
											"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
										}
									]
								}
							},
							"response": [
								{
									"name": "Статистика собрана",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stats"
											],
											"query": [
												{
													"key": "start",
													"value": "<string>",
													"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "end",
													"value": "<string>",
													"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "uris",
													"value": "<string>",
													"description": "Список uri для которых нужно выгрузить статистику"
												},
												{
													"key": "unique",
													"value": "false",
													"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  },\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  }\n]"
								}
							]
						},
						{
							"name": "Получение статистики неправильный диапазон времени",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 or 201\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/stats?start=2023-09-01%2010%3A30%3A45&end=2023-08-25%2018%3A30%3A45&uris=/events/1&unique=true",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"stats"
									],
									"query": [
										{
											"key": "start",
											"value": "2023-09-01%2010%3A30%3A45",
											"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "end",
											"value": "2023-08-25%2018%3A30%3A45",
											"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
										},
										{
											"key": "uris",
											"value": "/events/1",
											"description": "Список uri для которых нужно выгрузить статистику"
										},
										{
											"key": "uris",
											"value": "/events/2",
											"disabled": true
										},
										{
											"key": "unique",
											"value": "true",
											"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
										}
									]
								}
							},
							"response": [
								{
									"name": "Статистика собрана",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/stats?start=<string>&end=<string>&uris=<string>&unique=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"stats"
											],
											"query": [
												{
													"key": "start",
													"value": "<string>",
													"description": "(Required) Дата и время начала диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "end",
													"value": "<string>",
													"description": "(Required) Дата и время конца диапазона за который нужно выгрузить статистику (в формате \"yyyy-MM-dd HH:mm:ss\")"
												},
												{
													"key": "uris",
													"value": "<string>",
													"description": "Список uri для которых нужно выгрузить статистику"
												},
												{
													"key": "unique",
													"value": "false",
													"description": "Нужно ли учитывать только уникальные посещения (только с уникальным ip)"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  },\n  {\n    \"app\": \"<string>\",\n    \"uri\": \"<string>\",\n    \"hits\": \"<long>\"\n  }\n]"
								}
							]
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9090"
		}
	]
}